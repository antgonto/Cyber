import * as React from 'react';
import { useState, useEffect } from 'react';
import {
  EuiBasicTable,
  EuiButton,
  EuiButtonIcon,
  EuiFlexGroup,
  EuiFlexItem,
  EuiPage,
  EuiPageBody,
  EuiPageHeader,
  EuiTitle,
  EuiModal,
  EuiModalHeader,
  EuiModalHeaderTitle,
  EuiModalBody,
  EuiModalFooter,
  EuiForm,
  EuiFormRow,
  EuiFieldText,
  EuiSpacer
} from '@elastic/eui';
import { vulnerabilityService } from '../services/api';

const VulnerabilitiesList = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [currentVulnerability, setCurrentVulnerability] = useState({ vulnerability_id: '', title: '', description: '', severity: '', cve_reference: '', remediation_steps: '' });
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const fetchVulnerabilities = async () => {
    try {
      const response = await vulnerabilityService.getVulnerabilities();
      setVulnerabilities(response.data);
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
    }
  };

  const handleOpenModal = (vulnerability = null) => {
    if (vulnerability) {
      setCurrentVulnerability({ ...vulnerability });
      setIsEditing(true);
    } else {
      setCurrentVulnerability({ vulnerability_id: '', title: '', description: '', severity: '', cve_reference: '', remediation_steps: '' });
      setIsEditing(false);
    }
    setIsModalVisible(true);
  };

  const handleCloseModal = () => {
    setIsModalVisible(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setCurrentVulnerability({ ...currentVulnerability, [name]: value });
  };

  const handleSubmit = async () => {
    try {
      if (isEditing) {
        const { vulnerability_id, ...vulnerabilityData } = currentVulnerability;
        await vulnerabilityService.updateVulnerability(vulnerability_id, vulnerabilityData);
      } else {
        await vulnerabilityService.createVulnerability(currentVulnerability);
      }
      handleCloseModal();
      fetchVulnerabilities();
    } catch (error) {
      console.error('Error saving vulnerability:', error);
    }
  };

  const handleDeleteVulnerability = async (vulnerabilityId) => {
    try {
      await vulnerabilityService.deleteVulnerability(vulnerabilityId);
      fetchVulnerabilities();
    } catch (error) {
      console.error('Error deleting vulnerability:', error);
    }
  };

  const columns = [
    {
      field: 'vulnerability_id',
      name: 'ID',
      sortable: true,
      width: '50px',
    },
    {
      field: 'title',
      name: 'Title',
      sortable: true,
    },
    {
      field: 'description',
      name: 'Description',
      sortable: true,
    },
    {
      field: 'severity',
      name: 'Severity',
    },
    {
      field: 'cve_reference',
      name: 'CVE Reference',
    },
    {
      field: 'remediation_steps',
      name: 'Remediation Steps',
    },
    {
      field: 'actions',
      name: 'Actions',
      render: (vulnerability_id, vulnerability) => (
        <div>
          <EuiButtonIcon
            iconType="pencil"
            aria-label="Edit"
            onClick={() => handleOpenModal(vulnerability)}
          />
          &nbsp;
          <EuiButtonIcon
            iconType="trash"
            color="danger"
            aria-label="Delete"
            onClick={() => {
              if (window.confirm('Are you sure you want to delete this vulnerability?')) {
                handleDeleteVulnerability(vulnerability.vulnerability_id);
              }
            }}
          />
        </div>
      ),
    },
  ];

  const modal = isModalVisible ? (
    <EuiModal onClose={handleCloseModal} style={{ width: '500px' }}>
      <EuiModalHeader>
        <EuiModalHeaderTitle>
          {isEditing ? 'Edit Vulnerability' : 'Add New Vulnerability'}
        </EuiModalHeaderTitle>
      </EuiModalHeader>

      <EuiModalBody>
        <EuiForm>
          <EuiFormRow label="Title">
            <EuiFieldText
              name="title"
              value={currentVulnerability.title}
              onChange={(e) => handleInputChange(e)}
            />
          </EuiFormRow>

          <EuiFormRow label="Description">
            <EuiFieldText
              name="description"
              value={currentVulnerability.description}
              onChange={(e) => handleInputChange(e)}
            />
          </EuiFormRow>

          <EuiFormRow label="Severity">
            <EuiFieldText
              name="severity"
              value={currentVulnerability.severity || ''}
              onChange={(e) => handleInputChange(e)}
            />
          </EuiFormRow>

          <EuiFormRow label="CVE Reference">
            <EuiFieldText
              name="cve_reference"
              value={currentVulnerability.cve_reference || ''}
              onChange={(e) => handleInputChange(e)}
            />
          </EuiFormRow>
          <EuiFormRow label="Remediation Steps">
            <EuiFieldText
              name="remediation_steps"
              value={currentVulnerability.remediation_steps || ''}
              onChange={(e) => handleInputChange(e)}
            />
          </EuiFormRow>
        </EuiForm>
      </EuiModalBody>

      <EuiModalFooter>
        <EuiButton onClick={handleCloseModal} fill={false}>
          Cancel
        </EuiButton>

        <EuiButton onClick={handleSubmit} fill>
          {isEditing ? 'Update' : 'Create'}
        </EuiButton>
      </EuiModalFooter>
    </EuiModal>
  ) : null;

  return (
    <EuiPage>
      <EuiPageBody>
        <EuiPageHeader>
          <EuiFlexGroup justifyContent="spaceBetween" alignItems="center">
            <EuiFlexItem grow={false}>
              <EuiTitle>
                <h1>Vulnerabilities Management</h1>
              </EuiTitle>
            </EuiFlexItem>
            <EuiFlexItem grow={false}>
              <EuiButton
                iconType="plusInCircle"
                onClick={() => handleOpenModal()}
                fill
              >
                Add New Vulnerability
              </EuiButton>
            </EuiFlexItem>
          </EuiFlexGroup>
        </EuiPageHeader>

        <EuiSpacer size="l" />

        <EuiBasicTable
          items={vulnerabilities}
          columns={columns}
          tableLayout="fixed"
        />

        {modal}
      </EuiPageBody>
    </EuiPage>
  );
};

export default VulnerabilitiesList;
import React, { useState, useEffect } from 'react';
import {
  EuiBasicTable,
  EuiButton,
  EuiFormRow,
  EuiFieldText,
  EuiSpacer,
  EuiModal,
  EuiModalBody,
  EuiModalFooter,
  EuiModalHeader,
  EuiModalHeaderTitle,
  EuiPageHeader,
  EuiPanel,
  EuiSelect,
  EuiConfirmModal,
  EuiTextArea,
} from '@elastic/eui';
import { vulnerabilityService } from '../services/api';

// Frontend vulnerability interface
interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  cveReference: string;
  remediationSteps: string;
}

// Backend vulnerability interface
interface BackendVulnerability {
  vulnerability_id: number;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  cve_reference: string;
  remediation_steps: string;
}

// Form data interface
interface FormData {
  title: string;
  description: string;
  severity: string;
  cveReference: string;
  remediationSteps: string;
}

const VulnerabilityList: React.FC = () => {
  // State for vulnerabilities data
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // State for modal and form
  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState<boolean>(false);
  const [currentVulnerability, setCurrentVulnerability] = useState<Vulnerability | null>(null);
  const [formData, setFormData] = useState<FormData>({
    title: '',
    description: '',
    severity: 'medium',
    cveReference: '',
    remediationSteps: ''
  });

  // Fetch vulnerabilities data
  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const fetchVulnerabilities = async () => {
    setIsLoading(true);
    try {
      const response = await vulnerabilityService.getVulnerabilities();
      // Map backend data to frontend format
      const mappedVulnerabilities = response.data.map((vuln: BackendVulnerability) => ({
        id: vuln.vulnerability_id.toString(),
        title: vuln.title,
        description: vuln.description,
        severity: vuln.severity,
        cveReference: vuln.cve_reference,
        remediationSteps: vuln.remediation_steps
      }));
      setVulnerabilities(mappedVulnerabilities);
    } catch (error) {
      console.error('Failed to fetch vulnerabilities:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Create new vulnerability
  const createVulnerability = async () => {
    try {
      const vulnerabilityData = {
        title: formData.title,
        description: formData.description,
        severity: formData.severity,
        cve_reference: formData.cveReference,
        remediation_steps: formData.remediationSteps
      };

      const response = await vulnerabilityService.createVulnerability(vulnerabilityData);

      // Add the new vulnerability to the list
      const newVulnerability: Vulnerability = {
        id: response.data.vulnerability_id.toString(),
        title: response.data.title,
        description: response.data.description,
        severity: response.data.severity,
        cveReference: response.data.cve_reference,
        remediationSteps: response.data.remediation_steps
      };

      setVulnerabilities([...vulnerabilities, newVulnerability]);
      closeModal();
    } catch (error) {
      console.error('Failed to create vulnerability:', error);
    }
  };

  // Update existing vulnerability
const updateVulnerability = async () => {
    if (!currentVulnerability) return;

    try {
      const vulnerabilityData = {
        title: formData.title,
        description: formData.description,
        severity: formData.severity,
        cve_reference: formData.cveReference,
        remediation_steps: formData.remediationSteps
      };

      // Make API call to update the vulnerability
      await vulnerabilityService.updateVulnerability(
        parseInt(currentVulnerability.id),
        vulnerabilityData
      );

      // Update the vulnerability in the list
      const updatedVulnerabilities = vulnerabilities.map(vulnerability =>
        vulnerability.id === currentVulnerability.id
          ? {
              ...vulnerability,
              title: formData.title,
              description: formData.description,
              severity: formData.severity as Vulnerability['severity'],
              cveReference: formData.cveReference,
              remediationSteps: formData.remediationSteps
            }
          : vulnerability
      );

      setVulnerabilities(updatedVulnerabilities);
      closeModal();
    } catch (error) {
      console.error('Failed to update vulnerability:', error);
    }
  };

  // Delete vulnerability
  const deleteVulnerability = async () => {
    if (!currentVulnerability) return;

    try {
      await vulnerabilityService.deleteVulnerability(currentVulnerability.id);

      // Remove the vulnerability from the list
      const filteredVulnerabilities = vulnerabilities.filter(
        vulnerability => vulnerability.id !== currentVulnerability.id
      );

      setVulnerabilities(filteredVulnerabilities);
      closeDeleteModal();
    } catch (error) {
      console.error('Failed to delete vulnerability:', error);
    }
  };

  // Handle form input changes
  const handleInputChange = (field: string, value: any) => {
    setFormData({
      ...formData,
      [field]: value,
    });
  };

  // Open modal for creating new vulnerability
  const openCreateModal = () => {
    setCurrentVulnerability(null);
    setFormData({
      title: '',
      description: '',
      severity: 'medium',
      cveReference: '',
      remediationSteps: ''
    });
    setIsModalVisible(true);
  };

  // Open modal for editing existing vulnerability
  const openEditModal = (vulnerability: Vulnerability) => {
    setCurrentVulnerability(vulnerability);
    setFormData({
      title: vulnerability.title,
      description: vulnerability.description,
      severity: vulnerability.severity,
      cveReference: vulnerability.cveReference,
      remediationSteps: vulnerability.remediationSteps
    });
    setIsModalVisible(true);
  };

  // Open delete confirmation modal
  const openDeleteModal = (vulnerability: Vulnerability) => {
    setCurrentVulnerability(vulnerability);
    setIsDeleteModalVisible(true);
  };

  // Close modals
  const closeModal = () => {
    setIsModalVisible(false);
    setCurrentVulnerability(null);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalVisible(false);
    setCurrentVulnerability(null);
  };

  // Table columns configuration
  const columns = [
    {
      field: 'id',
      name: 'ID',
      sortable: true,
      width: '70px',
    },
    {
      field: 'title',
      name: 'Title',
      sortable: true,
      truncateText: true,
    },
    {
      field: 'description',
      name: 'Description',
      sortable: true,
      truncateText: true,
    },
    {
      field: 'severity',
      name: 'Severity',
      sortable: true,
      render: (severity: Vulnerability['severity']) => {
        const colors = {
          low: 'success' as 'success',
          medium: 'primary' as 'primary',
          high: 'warning' as 'warning',
          critical: 'danger' as 'danger',
        };
        return (
          <EuiButton
            size="s"
            color={colors[severity]}
            fill
          >
            {severity.charAt(0).toUpperCase() + severity.slice(1)}
          </EuiButton>
        );
      },
    },
    {
      field: 'cveReference',
      name: 'CVE Reference',
      sortable: true,
    },
    {
      field: 'remediationSteps',
      name: 'Remediation Steps',
      sortable: true,
      truncateText: true,
    },
    {
      name: 'Actions',
      actions: [
        {
          name: 'Edit',
          description: 'Edit this vulnerability',
          icon: 'pencil',
          type: 'icon',
          onClick: (vulnerability: Vulnerability) => openEditModal(vulnerability),
        },
        {
          name: 'Delete',
          description: 'Delete this vulnerability',
          icon: 'trash',
          type: 'icon',
          color: 'danger' as 'danger',
          onClick: (vulnerability: Vulnerability) => openDeleteModal(vulnerability),
        },
      ],
    } as any,
  ];

  return (
    <div style={{ padding: '24px' }}>
      <EuiPageHeader
        pageTitle="Vulnerabilities Management"
        rightSideItems={[
          <EuiButton
            fill
            iconType="plusInCircle"
            onClick={openCreateModal}
          >
            Create Vulnerability
          </EuiButton>,
        ]}
      />

      <EuiSpacer size="l" />

      <EuiPanel>
        <EuiBasicTable
          items={vulnerabilities}
          columns={columns}
          loading={isLoading}
          noItemsMessage="No vulnerabilities found"
        />
      </EuiPanel>

      {/* Create/Edit Modal */}
      {isModalVisible && (
        <EuiModal onClose={closeModal}>
          <EuiModalHeader>
            <EuiModalHeaderTitle>
              {currentVulnerability ? 'Edit Vulnerability' : 'Create New Vulnerability'}
            </EuiModalHeaderTitle>
          </EuiModalHeader>

          <EuiModalBody>
            <EuiFormRow label="Title" labelType="label">
              <EuiFieldText
                placeholder="Enter vulnerability title"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                required
              />
            </EuiFormRow>

            <EuiFormRow label="Description" labelType="label">
              <EuiTextArea
                placeholder="Enter vulnerability description"
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                rows={3}
              />
            </EuiFormRow>

            <EuiFormRow label="Severity" labelType="label">
              <EuiSelect
                options={[
                  { value: 'low', text: 'Low' },
                  { value: 'medium', text: 'Medium' },
                  { value: 'high', text: 'High' },
                  { value: 'critical', text: 'Critical' },
                ]}
                value={formData.severity}
                onChange={(e) => handleInputChange('severity', e.target.value)}
              />
            </EuiFormRow>

            <EuiFormRow label="CVE Reference" labelType="label">
              <EuiFieldText
                placeholder="CVE ID (e.g., CVE-2023-1234)"
                value={formData.cveReference}
                onChange={(e) => handleInputChange('cveReference', e.target.value)}
              />
            </EuiFormRow>

            <EuiFormRow label="Remediation Steps" labelType="label">
              <EuiTextArea
                placeholder="Enter remediation steps"
                value={formData.remediationSteps}
                onChange={(e) => handleInputChange('remediationSteps', e.target.value)}
                rows={3}
              />
            </EuiFormRow>
          </EuiModalBody>

          <EuiModalFooter>
            <EuiButton onClick={closeModal}>Cancel</EuiButton>
            <EuiButton
              fill
              onClick={currentVulnerability ? updateVulnerability : createVulnerability}
            >
              {currentVulnerability ? 'Update' : 'Create'}
            </EuiButton>
          </EuiModalFooter>
        </EuiModal>
      )}

      {/* Delete Confirmation Modal */}
      {isDeleteModalVisible && (
        <EuiConfirmModal
          title="Delete Vulnerability"
          onCancel={closeDeleteModal}
          onConfirm={deleteVulnerability}
          cancelButtonText="Cancel"
          confirmButtonText="Delete"
          buttonColor="danger"
        >
          <p>Are you sure you want to delete vulnerability "{currentVulnerability?.title}"?</p>
          <p>This action cannot be undone.</p>
        </EuiConfirmModal>
      )}
    </div>
  );
};

export default VulnerabilityList;
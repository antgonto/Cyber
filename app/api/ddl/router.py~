import psycopg
from ninja import Schema
from django.conf import settings
from typing import Dict

from psycopg import OperationalError

from ninja import Router

router = Router(tags=["ddl"])

class MessageResponse(Schema):
    message: str
    success: bool


@router.post("/create_truncate_procedure/", response=MessageResponse)
def create_truncate_procedure(request) -> Dict:
    """Creates the database truncate procedure in PostgreSQL"""
    try:
        conn = psycopg.connect(
            dbname=settings.DATABASES['default']["NAME"],
            user=settings.DATABASES['default']["USER"],
            password=settings.DATABASES['default']["PASSWORD"],
            host=settings.DATABASES['default']["HOST"],
            port=settings.DATABASES['default']["PORT"]
        )

        create_sql = """
        CREATE OR REPLACE PROCEDURE truncate_cybersecurity_db()
        LANGUAGE sql
        AS $$
          TRUNCATE TABLE
            user_activity_logs,
            threat_incident_association,
            threat_vulnerability_association,
            threat_asset_association,
            api_threatintelligence,
            api_alert,
            incident_assets,
            api_incident,
            asset_vulnerabilities,
            api_vulnerability,
            api_asset,
            api_user
          CASCADE;
        $$;
        """

        with conn.cursor() as cur:
            cur.execute(create_sql)
        conn.commit()
        conn.close()

        return {"message": "Truncate procedure created successfully", "success": True}
    except OperationalError as e:
        return {"message": f"Database operation failed: {str(e)}", "success": False}


@router.post("/execute_truncate_procedure/", response=MessageResponse)
def execute_truncate_procedure(request) -> Dict:
    """Executes the database truncate procedure"""
    try:
        conn = psycopg.connect(
            dbname=settings.DATABASES['default']["NAME"],
            user=settings.DATABASES['default']["USER"],
            password=settings.DATABASES['default']["PASSWORD"],
            host=settings.DATABASES['default']["HOST"],
            port=settings.DATABASES['default']["PORT"]
        )

        with conn.cursor() as cur:
            cur.execute("CALL truncate_cybersecurity_db();")
        conn.commit()
        conn.close()

        return {"message": "Database truncated successfully", "success": True}
    except OperationalError as e:
        return {"message": f"Database operation failed: {str(e)}", "success": False}

@router.post("/create_database_procedure/", response=MessageResponse)
def create_database_procedure(request) -> Dict:
    """Creates a stored procedure to create the cyber_db database"""
    try:
        conn = psycopg.connect(
            dbname=settings.DATABASES['default']["NAME"],
            user=settings.DATABASES['default']["USER"],
            password=settings.DATABASES['default']["PASSWORD"],
            host=settings.DATABASES['default']["HOST"],
            port=settings.DATABASES['default']["PORT"]
        )

        create_db_sql = """
        CREATE OR REPLACE PROCEDURE create_cybersecurity_db()
        LANGUAGE plpgsql
        AS $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'cyber_db') THEN
                PERFORM dblink_exec('dbname=postgres', 'CREATE DATABASE cyber_db');
            END IF;
        END;
        $$;
        """

        with conn.cursor() as cur:
            cur.execute(create_db_sql)
        conn.commit()
        conn.close()

        return {"message": "Database creation procedure created successfully", "success": True}
    except OperationalError as e:
        return {"message": f"Database operation failed: {str(e)}", "success": False}


@router.post("/execute_create_database_procedure/", response=MessageResponse)
def execute_database_procedure(request) -> Dict:
    """Executes the stored procedure to create the cyber_db database"""
    try:
        conn = psycopg.connect(
            dbname=settings.DATABASES['default']["NAME"],
            user=settings.DATABASES['default']["USER"],
            password=settings.DATABASES['default']["PASSWORD"],
            host=settings.DATABASES['default']["HOST"],
            port=settings.DATABASES['default']["PORT"]
        )

        with conn.cursor() as cur:
            cur.execute("CALL create_cybersecurity_db();")
        conn.commit()
        conn.close()

        return {"message": "Database created successfully", "success": True}
    except OperationalError as e:
        return {"message": f"Database operation failed: {str(e)}", "success": False}
-- Takes an incident ID as input
-- Calculates a base risk score from the incident severity
-- Adds risk factors based on:
    -- Asset criticality and count
    -- Vulnerability severity and count
    -- Threat intelligence confidence levels
    -- Alert severity and count
    -- Time the incident has been open
-- Returns a detailed result with:
    -- Core incident information
    -- Calculated risk score (0-100)
    -- Breakdown of risk factors as JSON
    -- Recommended action based on the final score


CREATE OR REPLACE FUNCTION calculate_incident_risk_score(p_incident_id INTEGER)
RETURNS TABLE (
    incident_id INTEGER,
    incident_type VARCHAR,
    severity VARCHAR,
    risk_score NUMERIC(5,2),
    risk_factors JSONB,
    recommended_action VARCHAR
) AS $$
DECLARE
    asset_factor NUMERIC(5,2) := 0;
    vuln_factor NUMERIC(5,2) := 0;
    threat_factor NUMERIC(5,2) := 0;
    alert_factor NUMERIC(5,2) := 0;
    time_factor NUMERIC(5,2) := 0;
    base_score NUMERIC(5,2);
    risk_factors_json JSONB;
    v_severity VARCHAR;
    current_time TIMESTAMP;
BEGIN
    -- Get current time
    current_time := NOW();

    -- Get incident severity
    SELECT severity INTO v_severity
    FROM incidents_incident
    WHERE incident_id = p_incident_id;

    -- Set base score based on severity
    CASE v_severity
        WHEN 'critical' THEN base_score := 80;
        WHEN 'high' THEN base_score := 60;
        WHEN 'medium' THEN base_score := 40;
        WHEN 'low' THEN base_score := 20;
        ELSE base_score := 10;
    END CASE;

    -- Calculate asset factor (higher criticality assets increase risk)
    SELECT
        CASE
            WHEN COUNT(*) = 0 THEN 0
            ELSE 5 * COUNT(*) *
                CASE
                    WHEN MAX(a.criticality_level) = 'critical' THEN 2
                    WHEN MAX(a.criticality_level) = 'high' THEN 1.5
                    WHEN MAX(a.criticality_level) = 'medium' THEN 1
                    ELSE 0.5
                END
        END INTO asset_factor
    FROM incident_assets ia
    JOIN assets_asset a ON a.asset_id = ia.asset_id
    WHERE ia.incident_id = p_incident_id;

    -- Limit to max 50 points
    asset_factor := LEAST(asset_factor, 50);

    -- Calculate vulnerability factor
    SELECT
        CASE
            WHEN COUNT(*) = 0 THEN 0
            ELSE 3 * COUNT(*) *
                CASE
                    WHEN bool_or(v.severity = 'critical') THEN 2
                    WHEN bool_or(v.severity = 'high') THEN 1.5
                    ELSE 1
                END
        END INTO vuln_factor
    FROM incident_assets ia
    JOIN asset_vulnerabilities av ON av.asset_id = ia.asset_id
    JOIN vulnerabilities_vulnerability v ON v.vulnerability_id = av.vulnerability_id
    WHERE ia.incident_id = p_incident_id;

    -- Limit to max 40 points
    vuln_factor := LEAST(vuln_factor, 40);

    -- Calculate threat intelligence factor
    SELECT
        CASE
            WHEN COUNT(*) = 0 THEN 0
            ELSE 10 * COUNT(*) *
                CASE
                    WHEN MAX(ti.confidence_level) = 'very_high' THEN 1.5
                    WHEN MAX(ti.confidence_level) = 'high' THEN 1.0
                    WHEN MAX(ti.confidence_level) = 'medium' THEN 0.5
                    ELSE 0.25
                END
        END INTO threat_factor
    FROM threat_incident_association tia
    JOIN threat_intelligence_threatintelligence ti ON ti.threat_id = tia.threat_id
    WHERE tia.incident_id = p_incident_id;

    -- Limit to max 30 points
    threat_factor := LEAST(threat_factor, 30);

    -- Calculate alert factor
    SELECT
        CASE
            WHEN COUNT(*) = 0 THEN 0
            ELSE 5 * COUNT(*) *
                CASE
                    WHEN bool_or(a.severity = 'critical') THEN 2
                    WHEN bool_or(a.severity = 'high') THEN 1.5
                    WHEN bool_or(a.severity = 'medium') THEN 1
                    ELSE 0.5
                END
        END INTO alert_factor
    FROM alerts_alert a
    WHERE a.incident_id = p_incident_id;

    -- Limit to max 30 points
    alert_factor := LEAST(alert_factor, 30);

    -- Calculate time factor (incidents open longer are higher risk)
    SELECT
        CASE
            WHEN status IN ('resolved', 'closed') THEN 0
            ELSE LEAST(
                EXTRACT(EPOCH FROM (current_time - reported_date))/86400, -- days since reported
                30  -- cap at 30 days
            )
        END INTO time_factor
    FROM incidents_incident
    WHERE incident_id = p_incident_id;

    -- Build risk factors JSON
    risk_factors_json := jsonb_build_object(
        'asset_factor', asset_factor,
        'vulnerability_factor', vuln_factor,
        'threat_factor', threat_factor,
        'alert_factor', alert_factor,
        'time_factor', time_factor
    );

    -- Calculate final risk score (base + factors, capped at 100)
    RETURN QUERY
    SELECT
        i.incident_id,
        i.incident_type,
        i.severity,
        LEAST(base_score + asset_factor + vuln_factor + threat_factor + alert_factor + time_factor, 100)::NUMERIC(5,2) AS risk_score,
        risk_factors_json,
        CASE
            WHEN (base_score + asset_factor + vuln_factor + threat_factor + alert_factor + time_factor) >= 90 THEN 'Immediate executive response required'
            WHEN (base_score + asset_factor + vuln_factor + threat_factor + alert_factor + time_factor) >= 75 THEN 'Escalate to security manager'
            WHEN (base_score + asset_factor + vuln_factor + threat_factor + alert_factor + time_factor) >= 50 THEN 'Assign to dedicated analyst'
            ELSE 'Follow standard procedures'
        END AS recommended_action
    FROM incidents_incident i
    WHERE i.incident_id = p_incident_id;
END;
$$ LANGUAGE plpgsql;


-- Calculate risk score for a single incident
SELECT * FROM calculate_incident_risk_score(123);

-- Get risk scores for all open incidents, ordered by priority
SELECT r.*
FROM incidents_incident i
CROSS JOIN LATERAL calculate_incident_risk_score(i.incident_id) r
WHERE i.status IN ('open', 'investigating')
ORDER BY r.risk_score DESC;

